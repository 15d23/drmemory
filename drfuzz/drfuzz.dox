/* **********************************************************
 * Copyright (c) 2014-2015 Google, Inc.   All rights reserved.
 * **********************************************************/

/*
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Google, Inc. nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL GOOGLE, INC. OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

/**
***************************************************************************
***************************************************************************
\page page_drfuzz Dr. Fuzz: Dynamic Fuzz Testing Extension

The \p Dr. Fuzz DynamoRIO Extension provides fuzz testing features.
\p Dr. Fuzz is part of the Dr. Memory Framework.

 - \ref sec_drfuzz_setup
 - \ref sec_drfuzz_API
 - \ref sec_drfuzz_mutators Mutators

\section sec_drfuzz_setup Setup

To use \p Dr. Fuzz with your client, first locate the Dr. Memory
Framework.  Then use the standard method of using an Extension with the
name \p drfuzz.  The two steps will look like this in your client's
\p CMakeLists.txt file:

\code
find_package(DrMemoryFramework)
use_DynamoRIO_extension(clientname drfuzz)
\endcode

To point CMake at the framework, set the DrMemoryFramework_DIR variable to
point at the \p drmf subdirectory of the Dr. Memory package that you are
using.  For example:

\code
cmake -G"Ninja" -DDynamoRIO_DIR=c:/path/to/DynamoRIO-Windows-4.1.0-8/cmake -DDrMemoryFramework_DIR=c:/path/to/DrMemory-Windows-1.6.0-2/drmf ../mysrcs/
\endcode

That will automatically set up the include path and library dependence.

Your client must call \p drfuzz_init() prior to accessing any API
routines in \p drfuzz, and should call \p drfuzz_exit() at process exit
time.


\section sec_drfuzz_API Dr. Fuzz API

\p Dr. Fuzz provides the following key features:
 -# Repeat execution of the test target function with fuzzed arguments.
 -# Mutate argument values using bit flipping, random number algorithms,
    or custom user-provided mutators.
 -# Schedule fuzz iterations for a target function and set of arguments.
 -# Report state information on a crash caused by fuzz inputs.

The client can use the provided Dr. Fuzz APIs to fuzz test the target application. The
most flexible approach is to use Dr. Fuzz directly to control the
fuzzing cycle using registered callbacks. This approach also requires the most effort, so
users who wish to get going quickly may prefer to use Dr. Memory's fuzzing
features, which leverage Dr. Fuzz.


\section sec_drfuzz_mutators Dr. Fuzz Mutators

To support custom mutators, mutation is performed by a libary separate from
the main \p Dr. Fuzz control library.  \p Dr. Fuzz provides a default
mutator library which contains several different mutator implementations.

\subsection sec_drfuzz_mut_ops Default Mutator

The default mutator built-in to \p Dr. Fuzz supports several mutation
variations, controlled by the following options (which are passed to
drfuzz_mutator_start()):

 - -alg &lt;algorithm_name&gt;<br>
   Specifies the algorithm for generating a new value.  The choices are:
   - "random": Randomly search the domain of possible permutations.
   - "ordered": Exhaustively search all possible permutations in an ordered
     manner.  This is the default;

 - -unit &lt;unit_name&gt;<br>
   Specifies the unit of transformation for applying the mutation algorithm.
   The choices are:
   - "bits": Bitwise application of the mutation algorithm.  This is the default.
   - "num": Numeric application of the mutation algorithm.

 - -flags &lt;int&gt;<br>
   Flags for the mutator. Some flags are specific to a particular algorithm and/or
   mutation unit.  The choices are:
   - 0x1: Reset the buffer contents to the input_seed after every bit-flip
     mutation. Only valid for MUTATOR_UNIT_BITS. On by default.
   - 0x2: Seed the mutator's random number generator with the current clock time.

 - -sparsity &lt;int&gt;<br>
   The degree of sparseness in the random coverage of the "random" algorithm
   with unit "bits" (invalid for other configurations). Sparsity of n will yield on
   average 1/n total values relative to the "ordered" algorithm in the same configuration.
   If the sparsity is set to 0, the default value of 1 will be used instead.

 - -max_value &lt;uint64&gt;<br>
   For buffers of size 8 bytes or smaller, specifies the maximum mutation value. Use
   value 0 to disable the maximum value (i.e., limit only by the buffer capacity).

 - -random_seed &lt;uint64&gt;<br>
   Set the randomization seed for algorithm "random".
   The default random seed is 0x5a8390e9a31dc65fULL, which was selected to
   have an equal number of 0 and 1 bits.

The default options are for ordered, seed-centric bit-flipping.

*/
