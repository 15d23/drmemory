/* **********************************************************
 * Copyright (c) 2011-2013 Google, Inc.  All rights reserved.
 * Copyright (c) 2009-2010 VMware, Inc.  All rights reserved.
 * **********************************************************/

/* Dr. Memory: the memory debugger
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; 
 * version 2.1 of the License, and no later version.

 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Library General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/* Conventions:
 * + We use \verbatim b/c it nicely highlights command lines, but
 *   because aliases aren't expanded in \verbatim (or \code), we have
 *   a pre-processing pass that replaces them.  We used to use
 *   \par<tt>...</tt> to get aliases expanded but it doesn't look
 *   as nice.  Note that \if is NOT supported by the script so
 *   use it outside the \verbatim.
 */

/**
***************************************************************************
***************************************************************************
\page page_install Installing Dr. Memory

Select your platform for instructions on how to install Dr. Memory onto
your computer:

 - \subpage page_install_linux
 - \subpage page_install_windows

***************************************************************************
\page page_install_linux Installing on Linux

********************
\section sec_linux_utils System Requirements

Ensure your Linux machine has perl installed, as it is used for the current
front-end to Dr. Memory.

Ensure your Linux installation is able to build 32-bit applications. On
64-bit Ubuntu you will want these packages:

\verbatim
sudo apt-get install ia32-libs g++-multilib
\endverbatim

********************
\section sec_linux_install Installing

Download the \p .tar.gz version of Dr. Memory.  Untar the package into a
directory of your choice:

\verbatim
tar xzf DrMemory-Linux-X.X.X-X.tar.gz
\endverbatim

Now either place the \p bin subdirectory of the Dr. Memory directory
structure on your PATH, or invoke Dr. Memory via its full path.

***************************************************************************
\page page_install_windows Installing on Windows

********************
\section sec_windows_system System Install

Download the \p .exe version of Dr. Memory.  Run the downloaded file to
launch the installer.  We recommend selecting the checkbox "Add to system
path for current user" to simplify use of the tool.  You can also elect to
place a Dr. Memory icon on the desktop if you would like to run your
applications under Dr. Memory by dragging and dropping.

********************
\section sec_windows_local Local Install

Download the \p .zip version of Dr. Memory.  Extract the files from the \p
.zip archive into a directory of your choice.  Now either place the \p bin
subdirectory of the Dr. Memory directory structure on your PATH, or invoke
Dr. Memory via its full path.

To edit your PATH to include Dr. Memory, from the "Start" menu, open the
"Control Panel". Click on "System". Then click on "Advanced system
settings". Say "Yes" to the User Account Control message.  Choose the
"Advanced" tab and click on "Environment Variables". In the top box, under
User Variables for your username, click on "PATH", then click on
"Edit". Assuming you unzipped Dr. Memory into "C:\INSTALL", go to the end
and add ";C:\INSTALL\DrMemory-Windows-1.5.0-5\bin".  Note that the semicolon
(;) is important!  After editing your PATH, you should restart your Cygwin
or cmd shell.

***************************************************************************
\page page_prep Preparing Your Application

First we give cross-plaform guidelines for how to build your application,
before giving specific compiler parameters for each platform.

********************
\section sec_prep_general For All Platforms

These cross-platform steps apply to both Linux and Windows.

********************
\subsection sec_prep_32bit 32-bit

Currently, Dr. Memory only supports 32-bit applications, so be sure to
compile your target application as 32-bit.

********************
\subsection sec_prep_debuginfo Debug Information

In order to obtain line number information, compile your target
application with debugging information enabled.
On Linux, Dr. Memory supports ELF files with DWARF2 line information.  On
Windows, Dr. Memory supports PDB debug information (produced by Visual
Studio) as well as PECOFF files with DWARF2 line information (produced by
MinGW gcc).

********************
\subsection sec_prep_callstacks Callstack Quality

You'll get better callstacks in error reports if you disable inlining.
Dr. Memory should be able to determine callstacks in the presence of frame
pointer optimizations (FPO) in most cases, but if you see strange
callstacks in an optimized application consider disabling FPO.

If your application links with a static library that was built with frame
pointer optimizations and you observe missing frames on your callstacks,
try running with the Dr. Memory runtime option \p -no_callstack_use_top_fp.
This will add some additional overhead on malloc-intensive applications,
but should eliminate skipped frames.

********************
\section sec_prep_linux Linux

Ensure your Linux installation is able to build 32-bit applications.  On
64-bit Ubuntu you will want these packages:

\verbatim
sudo apt-get install ia32-libs g++-multilib
\endverbatim

Dr. Memory currently only supports DWARF2 line information, not stabs.
DWARF2 is the default for modern versions of \p gcc.

Here is a sample command line for compiling your application that combines
all of the above recommendations:

\verbatim
g++ -m32 -g -fno-inline -fno-omit-frame-pointer myfile1.cpp myfile2.cpp -o myapp
\endverbatim

********************
\section sec_prep_windows Windows Visual Studio

Visual Studio builds 32-bit applications by default, so no action is
required on that front.

To include debug information, use the \p /Zi flag to the Visual Studio
compiler.  From the IDE, Press Alt-F7 to bring up the configuration
properties of your build target. Under "Configuration Properties | C/C++ |
General", the "Debug Information Format" entry should either say "Program
Database (/Zi)" or "Program Database for Edit and Continue (/ZI)".
Additionally, under "Configuration Properties | Linker | Debugging", the
"Generate Debug Info" entry should say "Yes (/DEBUG)".

To disable inlining as recommended above, use the \p /Ob0 parameter.  In
the Visual Studio IDE, press Alt-F7 and then under "Configuration
Properties | C/C++ | Optimization" ensure "Inline Function Expansion" says
"Disabled (/Ob0)".

To disable frame pointer optimization as recommended above, use the \p Oy-
parameter.  In the Visual Studio IDE, press Alt-F7 and then under
"Configuration Properties | C/C++ | Optimization" ensure "Omit Frame
Pointers" says "No (/Oy-)".

**********
\subsection sec_prep_win_libc C Library Interactions

All combinations of the debug or release C library, linked statically or
dynamically, are supported.  When using static versions of msvcrt (the \p
/MTd or \p /MT flags), if your application does not have symbols then
Dr. Memory will not be able to identify memory allocation calls, which may
lead to false positives and/or false negatives.  Be sure to build with
debugging information included using the instructions above.

The debug C library (specified with the \p /MDd or \p /MTd flags) contains
its own redzone and heap error checks.  Dr. Memory completely replaces
these checks with its own, more complete checks.

**********
\subsection sec_prep_win_rtc Disable Runtime Checks

The Visual Studio compiler's \p /RTC1 flag can prevent Dr. Memory from
reporting uninitialized reads of local variables, and the \p /RTC1 checks
for uninitialized reads themselves may not catch everything that Dr. Memory
finds.  However, \p /RTC1 does perform additional stack checks that
Dr. Memory does not, so for best results, your application should be run
under Dr. Memory without \p /RTC1, and run natively with \p /RTC1.

In the Visual Studio IDE, press Alt-F7 and then under "Configuration
Properties | C/C++ | Code Generation" ensure "Basic Runtime Checks" says
"Default".

**********
\subsection sec_prep_win_sum Parameter Summary

Here is a sample command line for Visual Studio:

\verbatim
cl /Zi /MT /EHsc /Oy- /Ob0 /Femyapp.exe *.cpp
\endverbatim

********************
\section sec_prep_mingw Windows MinGW

Dr. Memory supports 32-bit applications compiled with the MinGW gcc or g++
compilers, but will only provide line number information if DWARF2
debugging information is present.  The default for MinGW gcc prior to
version 4.3 is to use the stabs format, which is not supported by
Dr. Memory.  Pass the \p -ggdb option to gcc to generate DWARF2 format
instead.

You install the MinGW compiler in a Cygwin installation by running the
Cygwin installer (\p setup.exe), searching for "mingw", opening Devel, and
installing \p mingw-gcc-g++.  Alternatively, MinGW can be installed on its
own.

For MinGW C++ applications, we recommending building with static libstdc++
libraries.  Pass <tt>-static-libgcc -static-libstdc++</tt> to g++ to
request this.  These static libraries contain frame pointer optimizations
but Dr. Memory automatically enables the \p -no_callstack_use_top_fp
runtime option for MinGW applications.

Here is a sample command line for MinGW:

\verbatim
i686-pc-mingw32-g++.exe -static-libgcc -static-libstdc++ -ggdb -o myapp.exe myfile1.cpp myfile2.cpp
\endverbatim

********************
\section sec_prep_cygwin Windows Cygwin: Not Supported

Currently there is no support for applications built with Cygwin gcc or g++.

The regular Dr. Memory build can be executed just fine from a Cygwin
shell when targeting non-Cygwin applications.

***************************************************************************
\page page_running Running Dr. Memory

Once you have installed Dr. Memory and built your application properly, the
next step is to execute it on your workload of choice under Dr. memory.

********************
\section sec_vstudio Dr. Memory as a Visual Studio Tool

To run Dr. Memory within Visual Studio, add it as an External Tool.  For
Visual Studio 2005 through 2012, select the <tt>Tools | External
Tools...</tt> menu option to open the External Tools dialog box.  Click Add
and fill in the fields as follows (adjusting the path to \p drmemory.exe if
you installed it somewhere else):

\verbatim
Title: Dr. Memory
Command: C:\Program Files (x86)\Dr. Memory\bin\drmemory.exe
Arguments: -visual_studio -- $(TargetPath)
Initial Directory: $(TargetDir)
\endverbatim

Check the <tt>Use Output window</tt> checkbox.  Click OK.

For Visual Studio 6, select <tt>Tools | Customize</tt>, then the \p Tools
tab, and then click the \p New button.  Fill in the fields as above, though
the \p Title field is instead the input box in the main list.  Also, you'll
want quotes around the TargetPath variable (but you do not want quotes for
any later Visual Studio version):

\verbatim
Command: C:\Program Files\Dr. Memory\bin\drmemory.exe
Arguments: -visual_studio -- "$(TargetPath)"
Initial Directory: $(TargetDir)
\endverbatim

Now you can select <tt>Tools | Dr. Memory</tt> and Visual Studio will run
your application.  The output of Dr. Memory (along with your program) will
be printed to the Output Window.  You can double-click on a source file on
any callstack frame in order to automatically open up that file to the line
number indicated.

********************
\section sec_invocation Invoking Dr. Memory from the Command Line

Run your application as you normally would from a command prompt (on
Windows, either the \p cmd shell or a Cygwin prompt), with \p \FRONT_END
and "--" prefixed to the command line (the "--" separates any arguments to
Dr. Memory from the application being run).

On Windows:
\verbatim
drmemory.exe -- c:/path/to/my/app args to my app
\endverbatim

On Linux:
\verbatim
drmemory.pl -- /path/to/my/app args to my app
\endverbatim

Examples throughout the rest of the documentation will use just one platform,
but can readily be adapted to the other by changing the front-end (\p
drmemory.exe or \p drmemory.pl) and the path style.

If as part of \ref page_install you did not add Dr. Memory to your path,
you'll need to specify the full path to Dr. Memory.

On Windows, you can also drag-and-drop your application onto \p drmemory.exe in 
Windows Explorer or on the Desktop if you requested a Desktop shorcut upon
installation.

When running scripts it is best to explicitly invoke the interpreter rather
than invoking the script directly.  For example:

\verbatim
drmemory.pl -- /usr/bin/perl ./myscript.pl
\endverbatim

********************
\section sec_results Examining the Results

Dr. Memory's results are written to a file called \p results.txt inside a
subdirectory created for each invocation of Dr. Memory, inside Dr. Memory's
log directory.  The log directory by default is the \p logs subdirectory of
the unpacked installation, or the Dr. Memory directory inside your profile
directory when Dr. Memory is installed into <tt>Program Files</tt> on Windows.  It can be
changed with the \p -logdir option:

\verbatim
drmemory.exe -logdir c:/logs -- c:/path/to/my/app
\endverbatim

When an application is executed under Dr. Memory's control, it creates a
subdirectory in the base log directory named
"DrMemory-<appname>.<pid>.NNN", where NNN is a counter that is incremented
to ensure unique names.

On Windows, the results files is automatically opened in \p notepad when
the application exits.  This only occurs for the top-level process; if it
created child processes, they will be followed by Dr. Memory and have their
own result directories and files, but these will not be automatically
displayed.  The option \p -batch can be used to disable the launch of \p
notepad at application exit.

For full details on each type of error reported by Dr. Memory, see \ref page_types.

If you would like to attach a debugger at the point an error is first
detected, use the \p -pause_at_unaddressable or \p -pause_at_uninitialized
options (see \ref page_options).

**********
\subsection sec_potential_errors Application Versus System Library Errors

Current versions of Dr. Memory can end up reporting uninitialized read and
leak errors in system library code on large Windows applications.  Future
Dr. Memory versions will eliminate these errors, but for now these likely
false positive errors are listed in a separate file from the normal \p
results.txt called \p potential_errors.txt.  The count of such errors is
listed in the <tt>ERRORS IGNORED</tt> section of the main error summary.
For example:
\verbatim
ERRORS IGNORED:
     17 potential error(s) (suspected false positives)
         (details: D:\drmemory\logs\DrMemory-myapp.exe.5144.000\potential_errors.txt)
     24 potential leak(s) (suspected false positives)
         (details: D:\drmemory\logs\DrMemory-myapp.exe.5144.000\potential_errors.txt)
\endverbatim

It is possible that some of these errors are in fact application errors in
parameters passed to system library routines where those parameters are not
used or read until deep into a system library callstack, though they are
suspected of being false positives due to being reported in several layers
of system library code.  The pattern checking used to identify system
libraries whose errors should be reported separately can be tuned via two
features, a blacklist and a whitelist.  Each feature contains patterns
against which file paths are matched.  These patterns can contain \p * or
\p ? wildcards.

The whitelist takes precedence and if set the blacklist is ignored.  The
whitelist is empty by default.  The option \p -lib_whitelist contains a
;-separated sequence of patterns against which library or executable paths
are matched.  The option \p -lib_whitelist_frames controls how many of the
top frames in each callstack are matched.  If a whitelist pattern appears
in any of those top frames, an error is reported normally.  Otherwise, it
is separated as a potential error.  The expected usage model is to populate
the whitelist with a list of paths in which application libraries or
executables reside, to limit the error reports to those paths.

The blacklist is controlled by parallel options \p -lib_blacklist and \p
-lib_blacklist_frames.  Running with <tt>-lib_blacklist_frames 0</tt> will
disable the blacklist and report all errors as application errors in \p
results.txt.  When non-zero, it controls how many of the top frames must
all match the blacklist before an error is separated as a potential error.
The blacklist is only enabled by default on Windows, where it is set to \p
$SYSTEMROOT*.d??.

An additional whitelist based on source file paths is available under the
options \p -src_whitelist and \p -src_whitelist_frames.  If combined with
\p -lib_whitelist, the library-based whitelist acts first, with the source
file-based whitelist filtering the errors that remain.

If many false positives are being reported and additional performance is
desired at the risk of not detecting all application errors, Dr. Memory's
\ref page_light can be used to disable checking for uninitialized reads and
leaks.

********************
\section sec_children Controlling Child Processes

By default, Dr. Memory monitors all child processes.  To disable this
behavior and not monitor any children, use this option:

\verbatim
drmemory.exe -no_follow_children -- c:/path/to/my/app
\endverbatim

On Windows, to follow all children except certain applications, run this
command with the executable name of each application you do not wish to
monitor, prior to running Dr. Memory with default options:

\verbatim
drconfig.exe -quiet -reg <myapp> -norun
\endverbatim

Where "myapp" is the basename of your executable (i.e., the file name
without any directories).

The \p drconfig.exe tool is in the same directory as \p drmemory.exe and is
only available on Windows in the current release.

This \p -norun request is permanent and affects all subsequent Dr. Memory
executions by the user that issued the \p -norun request.  To undo it, use
this command:

\verbatim
drconfig.exe -quiet -unreg <myapp>
\endverbatim

\if ISSUE_614
********************
\section sec_aggregate Aggregating Results From Multiple Processes

Dr. Memory supports aggregating results from multiple log directories,
whether from multiple processes of a multi-process application or from
multiple runs of the same application.  Simply use the \p -aggregate option
and supply the list of log directories, or a single directory containing
the log directories as sub-directories to aggregate all of them:

\verbatim
drmemory.pl -aggregate DrMemory-myapp.1234.000 DrMemory-myapp.1235.000 
\endverbatim

\verbatim
drmemory.pl -aggregate /parent/logdir/
\endverbatim

Currently the \p -aggregate option is not available on Windows.
\endif

********************
\section sec_daemon Applications That Do Not Exit

While Dr. Memory updates the \p results.txt file as the application runs,
it does not perform leak checking or produce a summary of errors until the
end of the run.  For applications that do not have a normal exit, such as
daemons, Dr. Memory provides a method of forcing end-of-run actions.

Run \p \FRONT_END with the \p -nudge option and the process identifier of
the application in order to request leak checking and other end-of-run
actions:

\verbatim
drmemory.exe -nudge <processid>
\endverbatim

\if ISSUE_446
********************
\section sec_twostep Post-Run Symbol Processing

Some applications have very large symbol files.  To reduce resource usage
during an application run, symbol processing can be disabled while the
application executes and instead be performed after the run.  Use the \p
-skip_results option when running the application.  Once finished, re-run
Dr. Memory with the \p -results option and the log directory created during
the run (which contains the raw data):

\verbatim
drmemory.pl -skip_results -- myapp myargs
\endverbatim

\verbatim
drmemory.pl -results DrMemory-myapp.9876.000
\endverbatim

If \p -results is invoked on a different machine where the application
executable is not located at the same path as when it was executed with \p
-skip_results, use the \p -results_app parameter to specify the executable
along with the \p -results parameter.

The \p -skip_results option is not currently available on Windows.
\endif

****************************************************************************
****************************************************************************
*/
/* It's good to split up large C comments: we've hit some sort of doxygen
 * internal buffering error before if one comment gets too long.
 */
